// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Closed extends ethereum.Event {
  get params(): Closed__Params {
    return new Closed__Params(this);
  }
}

export class Closed__Params {
  _event: Closed;

  constructor(event: Closed) {
    this._event = event;
  }
}

export class Deny extends ethereum.Event {
  get params(): Deny__Params {
    return new Deny__Params(this);
  }
}

export class Deny__Params {
  _event: Deny;

  constructor(event: Deny) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class File extends ethereum.Event {
  get params(): File__Params {
    return new File__Params(this);
  }
}

export class File__Params {
  _event: File;

  constructor(event: File) {
    this._event = event;
  }

  get what(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get domain(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get data(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Flushed extends ethereum.Event {
  get params(): Flushed__Params {
    return new Flushed__Params(this);
  }
}

export class Flushed__Params {
  _event: Flushed;

  constructor(event: Flushed) {
    this._event = event;
  }

  get targetDomain(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get dai(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Rely extends ethereum.Event {
  get params(): Rely__Params {
    return new Rely__Params(this);
  }
}

export class Rely__Params {
  _event: Rely;

  constructor(event: Rely) {
    this._event = event;
  }

  get usr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TeleportInitialized extends ethereum.Event {
  get params(): TeleportInitialized__Params {
    return new TeleportInitialized__Params(this);
  }
}

export class TeleportInitialized__Params {
  _event: TeleportInitialized;

  constructor(event: TeleportInitialized) {
    this._event = event;
  }

  get teleport(): TeleportInitializedTeleportStruct {
    return changetype<TeleportInitializedTeleportStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class TeleportInitializedTeleportStruct extends ethereum.Tuple {
  get sourceDomain(): Bytes {
    return this[0].toBytes();
  }

  get targetDomain(): Bytes {
    return this[1].toBytes();
  }

  get receiver(): Bytes {
    return this[2].toBytes();
  }

  get operator(): Bytes {
    return this[3].toBytes();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get nonce(): BigInt {
    return this[5].toBigInt();
  }

  get timestamp(): BigInt {
    return this[6].toBigInt();
  }
}

export class teleportDaiOptimism extends ethereum.SmartContract {
  static bind(address: Address): teleportDaiOptimism {
    return new teleportDaiOptimism("teleportDaiOptimism", address);
  }

  batchedDaiToFlush(param0: Bytes): BigInt {
    let result = super.call(
      "batchedDaiToFlush",
      "batchedDaiToFlush(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_batchedDaiToFlush(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "batchedDaiToFlush",
      "batchedDaiToFlush(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  domain(): Bytes {
    let result = super.call("domain", "domain():(bytes32)", []);

    return result[0].toBytes();
  }

  try_domain(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("domain", "domain():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isOpen(): BigInt {
    let result = super.call("isOpen", "isOpen():(uint256)", []);

    return result[0].toBigInt();
  }

  try_isOpen(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("isOpen", "isOpen():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  l1TeleportGateway(): Address {
    let result = super.call(
      "l1TeleportGateway",
      "l1TeleportGateway():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_l1TeleportGateway(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "l1TeleportGateway",
      "l1TeleportGateway():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  l2Token(): Address {
    let result = super.call("l2Token", "l2Token():(address)", []);

    return result[0].toAddress();
  }

  try_l2Token(): ethereum.CallResult<Address> {
    let result = super.tryCall("l2Token", "l2Token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  messenger(): Address {
    let result = super.call("messenger", "messenger():(address)", []);

    return result[0].toAddress();
  }

  try_messenger(): ethereum.CallResult<Address> {
    let result = super.tryCall("messenger", "messenger():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validDomains(param0: Bytes): BigInt {
    let result = super.call("validDomains", "validDomains(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_validDomains(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validDomains",
      "validDomains(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _l2CrossDomainMessenger(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _l2Token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _l1TeleportGateway(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _domain(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class FileCall extends ethereum.Call {
  get inputs(): FileCall__Inputs {
    return new FileCall__Inputs(this);
  }

  get outputs(): FileCall__Outputs {
    return new FileCall__Outputs(this);
  }
}

export class FileCall__Inputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }

  get what(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get domain(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get data(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FileCall__Outputs {
  _call: FileCall;

  constructor(call: FileCall) {
    this._call = call;
  }
}

export class FlushCall extends ethereum.Call {
  get inputs(): FlushCall__Inputs {
    return new FlushCall__Inputs(this);
  }

  get outputs(): FlushCall__Outputs {
    return new FlushCall__Outputs(this);
  }
}

export class FlushCall__Inputs {
  _call: FlushCall;

  constructor(call: FlushCall) {
    this._call = call;
  }

  get targetDomain(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class FlushCall__Outputs {
  _call: FlushCall;

  constructor(call: FlushCall) {
    this._call = call;
  }
}

export class InitiateTeleportCall extends ethereum.Call {
  get inputs(): InitiateTeleportCall__Inputs {
    return new InitiateTeleportCall__Inputs(this);
  }

  get outputs(): InitiateTeleportCall__Outputs {
    return new InitiateTeleportCall__Outputs(this);
  }
}

export class InitiateTeleportCall__Inputs {
  _call: InitiateTeleportCall;

  constructor(call: InitiateTeleportCall) {
    this._call = call;
  }

  get targetDomain(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get receiver(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get operator(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class InitiateTeleportCall__Outputs {
  _call: InitiateTeleportCall;

  constructor(call: InitiateTeleportCall) {
    this._call = call;
  }
}

export class InitiateTeleport1Call extends ethereum.Call {
  get inputs(): InitiateTeleport1Call__Inputs {
    return new InitiateTeleport1Call__Inputs(this);
  }

  get outputs(): InitiateTeleport1Call__Outputs {
    return new InitiateTeleport1Call__Outputs(this);
  }
}

export class InitiateTeleport1Call__Inputs {
  _call: InitiateTeleport1Call;

  constructor(call: InitiateTeleport1Call) {
    this._call = call;
  }

  get targetDomain(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitiateTeleport1Call__Outputs {
  _call: InitiateTeleport1Call;

  constructor(call: InitiateTeleport1Call) {
    this._call = call;
  }
}

export class InitiateTeleport2Call extends ethereum.Call {
  get inputs(): InitiateTeleport2Call__Inputs {
    return new InitiateTeleport2Call__Inputs(this);
  }

  get outputs(): InitiateTeleport2Call__Outputs {
    return new InitiateTeleport2Call__Outputs(this);
  }
}

export class InitiateTeleport2Call__Inputs {
  _call: InitiateTeleport2Call;

  constructor(call: InitiateTeleport2Call) {
    this._call = call;
  }

  get targetDomain(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get operator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitiateTeleport2Call__Outputs {
  _call: InitiateTeleport2Call;

  constructor(call: InitiateTeleport2Call) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get usr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}
