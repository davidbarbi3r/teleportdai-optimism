// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountBridged(): BigInt {
    let value = this.get("amountBridged");
    return value!.toBigInt();
  }

  set amountBridged(value: BigInt) {
    this.set("amountBridged", Value.fromBigInt(value));
  }

  get relayFees(): BigInt {
    let value = this.get("relayFees");
    return value!.toBigInt();
  }

  set relayFees(value: BigInt) {
    this.set("relayFees", Value.fromBigInt(value));
  }

  get makerFees(): BigInt {
    let value = this.get("makerFees");
    return value!.toBigInt();
  }

  set makerFees(value: BigInt) {
    this.set("makerFees", Value.fromBigInt(value));
  }

  get countBridged(): BigInt {
    let value = this.get("countBridged");
    return value!.toBigInt();
  }

  set countBridged(value: BigInt) {
    this.set("countBridged", Value.fromBigInt(value));
  }

  get teleport(): Array<string> {
    let value = this.get("teleport");
    return value!.toStringArray();
  }

  set teleport(value: Array<string>) {
    this.set("teleport", Value.fromStringArray(value));
  }
}

export class Teleport extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Teleport entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Teleport must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Teleport", id.toString(), this);
    }
  }

  static load(id: string): Teleport | null {
    return changetype<Teleport | null>(store.get("Teleport", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get originAddress(): Bytes {
    let value = this.get("originAddress");
    return value!.toBytes();
  }

  set originAddress(value: Bytes) {
    this.set("originAddress", Value.fromBytes(value));
  }

  get destinationAddress(): Bytes | null {
    let value = this.get("destinationAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set destinationAddress(value: Bytes | null) {
    if (!value) {
      this.unset("destinationAddress");
    } else {
      this.set("destinationAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get destChain(): Bytes {
    let value = this.get("destChain");
    return value!.toBytes();
  }

  set destChain(value: Bytes) {
    this.set("destChain", Value.fromBytes(value));
  }

  get originChain(): Bytes {
    let value = this.get("originChain");
    return value!.toBytes();
  }

  set originChain(value: Bytes) {
    this.set("originChain", Value.fromBytes(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class All extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save All entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type All must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("All", id.toString(), this);
    }
  }

  static load(id: string): All | null {
    return changetype<All | null>(store.get("All", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get countBridged(): BigInt {
    let value = this.get("countBridged");
    return value!.toBigInt();
  }

  set countBridged(value: BigInt) {
    this.set("countBridged", Value.fromBigInt(value));
  }

  get relayFees(): BigInt {
    let value = this.get("relayFees");
    return value!.toBigInt();
  }

  set relayFees(value: BigInt) {
    this.set("relayFees", Value.fromBigInt(value));
  }

  get makerFees(): BigInt {
    let value = this.get("makerFees");
    return value!.toBigInt();
  }

  set makerFees(value: BigInt) {
    this.set("makerFees", Value.fromBigInt(value));
  }

  get amountBridged(): BigInt {
    let value = this.get("amountBridged");
    return value!.toBigInt();
  }

  set amountBridged(value: BigInt) {
    this.set("amountBridged", Value.fromBigInt(value));
  }
}
